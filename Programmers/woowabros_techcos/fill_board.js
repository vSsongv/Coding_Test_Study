// rows행 columns열로 이루어진 격자가 있습니다.처음에 모든 격자 칸 안에는 숫자 0이 쓰여 있습니다.당신은 다음과 같은 과정을 통하여 격자에 숫자들을 채우고자 합니다.

// 현재 위치를 1행 1열로 정하고, 그 위치에 숫자 1을 씁니다.
// r을 현재 위치의 행, c를 현재 위치의 열로 정의합니다.
// 만약 격자 내에 0이 쓰인 칸이 없거나, 더 이상 0이 쓰여 있는 칸에 다른 숫자를 쓸 수 없게 된다면 과정을 즉시 종료합니다.
// 만약 가장 최근에 쓴 숫자가 짝수라면, r행 c열에서 r + 1행 c열로 이동합니다.r = rows라면, 1행으로 이동합니다.
// 만약 가장 최근에 쓴 숫자가 홀수라면, r행 c열에서 r행 c + 1열로 이동합니다.c = columns라면, 1열로 이동합니다.
// 도착한 칸에 원래 쓰여 있던 수를 지우고 가장 최근에 쓴 숫자 + 1을 씁니다.
// 2번 과정으로 돌아갑니다.
// 정수 rows와 columns가 매개변수로 주어집니다.주어진 과정을 따라 rows행 columns열로 이루어진 격자에 숫자를 썼을 때, 해당 격자를 2차원 정수 배열로 return 하도록 solution 함수를 완성해주세요.

//     제한사항
// 2 ≤ rows ≤ 1, 000
// 2 ≤ columns ≤ 1, 000
// 입출력 예
// rows	columns	result
// 3	4[[8, 2, 13, 14], [16, 10, 4, 15], [17, 11, 12, 6]]
// 3	3[[1, 2, 0], [0, 3, 4], [6, 0, 5]]
// 입출력 예 설명
// 입출력 예 #1

// 다음 애니메이션과 표는 숫자를 채우는 과정을 나타낸 것입니다.
//     ex1.png

// 숫자	위치	비고
// 1	1행 1열	가장 최근에 1(홀수)을 썼기 때문에, 열을 1 증가시킵니다.
// 2	1행 2열	가장 최근에 2(짝수)를 썼기 때문에, 행을 1 증가시킵니다.
// 3	2행 2열
// 4	2행 3열
// 5	3행 3열
// 6	3행 4열	기존의 위치가 3행이었기 때문에 1행으로 이동합니다.
// 7	1행 4열	기존의 위치가 4열이었기 때문에 1열로 이동합니다.
// 8	1행 1열	기존에 쓰여 있던 1을 지우고 8을 씁니다.
// 9	2행 1열
// 10	2행 2열
// 11	3행 2열
// 12	3행 3열
// 13	1행 3열
// 14	1행 4열
// 15	2행 4열
// 16	2행 1열
// 17	3행 1열	0이 쓰인 칸이 남지 않았으므로, 과정을 종료합니다.
// 입출력 예 #2

// 다음 애니메이션과 표는 숫자를 채우는 과정을 나타낸 것입니다.
//     ex2.png

// 숫자	위치	비고
// 1	1행 1열
// 2	1행 2열
// 3	2행 2열
// 4	2행 3열
// 5	3행 3열
// 6	3행 1열	이후부터는 같은 위치를 계속해서 빙글빙글 돌게 되므로, 더 이상 0이 쓰인 칸에 숫자를 쓸 수 없습니다.따라서 과정을 종료합니다.

function solution(rows, columns) {
    var answer = Array.from(Array(rows), () => Array(columns).fill(0));
    let cnt = (rows * columns) - 1;
    let num = 1;
    let x = 0, y = 0;
    answer[x][y] = num;
    while (cnt > 0) {
        if (num % 2 === 0) { //짝수인 경우
            x += 1;
            if (x === rows) x = 0;
        }
        else { //홀수인 경우
            y += 1;
            if (y === columns) y = 0;
        }
        num += 1;
        if (answer[x][y] === 0) cnt -= 1;
        if (x === 0 && y === 0 && num % 2 === 1) break;
        answer[x][y] = num;
    }
    return answer;
}
