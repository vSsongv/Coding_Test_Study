// 최대점수 구하기(냅색 알고리즘)
// 이번 정보올림피아드대회에서 좋은 성적을 내기 위하여 현수는 선생님이 주신 N개의 문제를 풀려고 합니다. 
// 각 문제는 그것을 풀었을 때 얻는 점수와 푸는데 걸리는 시간이 주어지게 됩니다. 
// 제한시간 M안에 N개의 문제 중 최대점수를 얻을 수 있도록 해야 합니다. 
// (해당문제는 해당시간이 걸리면 푸는 걸로 간주한다, 한 유형당 한개만 풀 수 있습니다.)
// ▣ 입력설명
// 매개변수 nums에 N(1<=N<=20)개의 문제 정보인 문제를 풀었을 때의 점수와 푸는데 걸리는 시간이 순서쌍으로 주어집니다. 매개변수 m에 제한 시간 M(10<=M<=300)이 주어집니다.
// ▣ 출력설명
// 제한 시간안에 얻을 수 있는 최대 점수를 반환합니다.
// ▣ 매개변수 형식 1
// [[10, 5], [25, 12], [15, 8], [6, 3], [7, 4]], 20
// ▣ 반환값 형식 1
// 41

function solution(nums, m) {
    let answer = 0;
    let dy = Array(m + 1).fill(0);
    for (let i = 0; i < nums.length; i++) {
        let score = nums[i][0]; //
        let point = nums[i][1];
        for (let j = m; j >= point; j--) { //뒤에서부터 돌면서
            dy[j] = Math.max(dy[j], dy[j - point] + score); //dp배열의 현재 값과 [마지막 index-point]의 indexd의 값에 score를 더한 값과 비교하여 더 큰 점수를 넣어준다.
        }
    }
    answer = dy[m];
    return answer;
}

console.log(solution([[10, 5], [25, 12], [15, 8], [6, 3], [7, 4]], 20));