// 데이터센터
// 엘리트 통신은 데이터 센터를 운영합니다.
// 데이터 센터는 N×N 격자로 구분되어 있고, 각 격자마다 컴퓨터를 여러 대 쌓을 수 있습니다.
// 컴퓨터가 과열되지 않도록 데이터센터는 언제나 냉방기가 작동하고 있다. 
// 그런데 요즘 회사가 경제적으로 어려워 데이터센터 운영비를 줄이기 위해 
// 데이터센터에 있는 컴퓨터 중 절반이상만 운영하여 전기료를 줄이기로 결정했습니다.
// 냉방기에서 나온 차가운 공기는 데이터센터 바닥에서부터 차례대로 차오릅니다. 
// 1분마다 컴퓨터 한 대의 높이만큼 데이터 센터를 차가운 공기로 채우면 올가갑니다.
// 데이터 센터에 있는 컴퓨터의 절반 이상이 차가운 공기의 영향을 받아 작동시키려면 
// 최소 몇분을 기다려야 하는지 구하는 프로그램을 작성하세요.
// ▣ 입력설명
// 매개변수 board에 N×N(1<=N<=1,000)크기의 격자 정보가 주어지고, 각 격자의 값은 해당 격
// 자에 컴퓨터가 몇 대 쌓여있는지 그 개수를 나타냅니다. 한 격자에는 최대 10,000,000대까지
// 컴퓨터를 쌓을 수 있습니다.
// ▣ 출력설명
// 데이터 센터의 있는 절반 이상의 컴퓨터가 차가운 공기를 받기 위해 최소 몇 분을 기다려야
// 하는 지 그 시간을 반환합니다.
// ▣ 매개변수 형식 1
// [[2, 3, 1, 5, 6], [3, 0, 7, 4, 3], [8, 5, 7, 5, 6], [9, 6, 1, 5, 5], [5, 5, 8, 5, 1]]
// ▣ 반환값 형식 1
// 3

function solution(board) {
    let answer = 0;
    let n = board.length;
    let left = 1, right = 0, sum = 0;

    board.forEach(ele => {
        right = Math.max(right, Math.max(...ele));
        sum += ele.reduce((a, b) => a+b);
    });

    function count(m) {
        let cnt = 0;
        for(let i = 0; i < n; i++) {
            for(let j = 0; j < n; j++) {
                if(board[i][j] >= m) cnt += m;
                else cnt += board[i][j];
            }
        }
        return cnt;
    }

    while(left<=right){
        let m=parseInt((left+right)/2);
        if(count(m)>=(sum/2)){
            answer=m;
            right=m-1;
        }
        else left=m+1;
    }
    return answer;
}

console.log(solution([[2, 3, 1, 5, 6], [3, 0, 7, 4, 3], [8, 5, 7, 5, 6], [9, 6, 1, 5, 5], [5, 5, 8, 5, 1]]));