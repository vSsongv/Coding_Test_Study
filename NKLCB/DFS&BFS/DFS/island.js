// 섬나라 아일랜드(DFS)
// N*N의 섬나라 아일랜드의 지도가 격자판의 정보로 주어집니다. 
// 각 섬은 1로 표시되어 상하좌우와 대각선으로 연결되어 있으며, 0은 바다입니다. 
// 섬나라 아일랜드에 몇 개의 섬이 있는지 구하는 프로그램을 작성하세요.
// 1 1 0 0 0 1 0
// 0 1 1 0 1 1 0
// 0 1 0 0 0 0 0
// 0 0 0 1 0 1 1
// 1 1 0 1 1 0 0
// 1 0 0 0 1 0 0
// 1 0 1 0 1 0 0
// 만약 위와 같다면
// ▣ 입력설명
// 매개변수 board에 N*N(3<=N<=20)의 격자판 정보가 주어집니다.
// ▣ 출력설명
// 섬의 개수를 반환합니다.
// ▣ 매개변수 형식 1
// [[1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1],
// [1, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0, 0]]
// ▣ 반환값 형식 1
// 5

function solution(board) {
    let answer = 0;
    let n = board.length;
    let dx = [-1, -1, 0, 1, 1, 1, 0, -1];
    let dy = [0, 1, 1, 1, 0, -1, -1, -1];

    function DFS(x, y) {
        for(let i = 0; i < 8; i++) {
            let nx = x + dx[i];
            let ny = y + dy[i];
            if(nx >= 0 && nx < n && ny >= 0 && ny < n && board[nx][ny] === 1) {
                board[nx][ny] = 0;
                DFS(nx, ny);
            }
        }
    }
    for(let k = 0; k < n; k++) {
        for(let j = 0; j < n; j++) {
            if(board[k][j] === 1) {
                board[k][j] = 0;
                answer += 1;
                DFS(k, j)
            }
        }
    }
    return answer;
}

console.log(solution([[1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1],
    [1, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0, 0]]));