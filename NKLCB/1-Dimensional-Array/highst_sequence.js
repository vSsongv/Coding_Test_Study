// 가장 높은 증가수열
// 길이가 N인 수열이 주어지면 이 수열에서 연속된 부분 증가수열을 찾습니다. 
// 각 부분증가수열은 높이가 있습니다. 증가수열의 높이란 증가수열의 첫항과 마지막항의 차를 의미합니다.
// 수열이 주어지면 여러 증가수열 중 가장 높은 부분증가수열을 찾는 프로그램을 작성하세요.
// 만약 수열이 [5, 2, 4, 7, 7, 3, 9, 10, 11]이 주어지면 가장 높은 부분증가수열은 [3, 9, 10,11]이고, 높이는 8입니다.
// 이웃하는 두 수가 같을 경우 증가수열로 보지 않습니다.
// ▣ 입력설명
// 매개변수 nums에 N(3<=N<=100,000)길이의 수열이 주어집니다. 수열의 원소는 자연수입니다.
// ▣ 출력설명
// 가장 높은 연속부분증가수열의 높이를 반환합니다.
// ▣ 매개변수 형식 1
// [5, 2, 4, 7, 7, 3, 9, 10, 11]
// ▣ 반환값 형식 1
// 8
// ▣ 매개변수 형식 2
// [8, 12, 2, 3, 7, 6, 20, 3]
// ▣ 반환값 형식 2
// 14

function solution(nums) {
    let answer = 0;
    let height = 0;
    for(let i = 1; i < nums.length; i++) {
        if(nums[i-1] < nums[i]) { //내 이전 값이 나보다 작다면 증가값이므로
            height += nums[i]-nums[i-1]; //증가값을 누적하고
        }
        else { //증가가 끝난 경우
            answer = Math.max(answer, height); //현재 answer와 방금까지 누적된 height를 비교해서 높은 것을 저장해둔다.
            height = 0;
        }
    }
    answer = Math.max(answer, height);
    return answer;
}

console.log(solution([5, 2, 4, 7, 7, 3, 9, 10, 11]));
console.log(solution([8, 12, 2, 3, 7, 6, 20, 3]));