// 플로이드 와샬 알고리즘
// N개의 도시가 주어지고, 각 도시들을 연결하는 도로와 해당 도로를 통행하는 비용이 주어질 때
//  모든 도시에서 모든 도시로 이동하는데 쓰이는 비용의 최소값을 구하는 프로그램을 작성하세요.
// ▣ 입력설명
// 매개변수 n에 도시의 수N(N<=100)과 M(M<=200)개의 간선 정보가 edges에 주어진다.
// 간선정보는 1번 도시와 2번도시가 연결되고 그 비용이 13이면 “1 2 13”으로 주어진다.
// ▣ 출력설명
// 모든 도시에서 모든 도시로 이동하는데 드는 최소 비용을 아래와 같이 반환한다.
// 자기자신으로 가는 비용은 0입니다. i번 정점에서 j번 정점으로 갈 수 없을 때는 비용을 “M"으로 합니다.
// ▣ 매개변수 형식 1
// 5, [[1, 2, 6], [1, 3, 3], [3, 2, 2], [2, 4, 1], [2, 5, 13], [3, 4, 5], [4, 2, 3], [4, 5, 7]]
// ▣ 반환값 형식 1
// [[0, 5, 3, 6, 13],
// [M, 0, M, 1, 8],
// [M, 2, 0, 3, 10],
// [M, 3, M, 0, 7],
// [M, M, M, M, 0]]

function solution(n, edges) {
    let dy = Array.from(Array(n + 1), () => Array(n + 1).fill(1000));
    for (let i = 1; i <= n; i++) dy[i][i] = 0;
    for (let [a, b, c] of edges) dy[a][b] = c;
    //------------------------------------------------//
    for (let k = 1; k <= n; k++) {
        for (let i = 1; i <= n; i++) {
            for (let j = 1; j <= n; j++) {
                if (dy[i][j] > dy[i][k] + dy[k][j]) {
                    dy[i][j] = dy[i][k] + dy[k][j];
                }
            }
        }
    }
    //------------------------------------------------//
    for (let i = 1; i <= n; i++) {
        for (let j = 1; j <= n; j++) {
            if (dy[i][j] === 1000) dy[i][j] = 'M';
        }
    }
    return dy;
}

console.log(solution(5, [[1, 2, 6], [1, 3, 3], [3, 2, 2], [2, 4, 1], [2, 5, 13], [3, 4, 5], [4, 2, 3], [4, 5, 7]]));